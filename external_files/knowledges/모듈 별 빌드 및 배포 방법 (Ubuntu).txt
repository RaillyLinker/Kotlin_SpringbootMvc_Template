[모듈 별 빌드 및 배포 방법 (Ubuntu)]
(모듈 빌드 방법)
- module-template 를 빌드한다고 가정하였을 때,
    커맨드창에서 프로젝트 최외곽에 gradlew 가 있는 위치에서,

    >> ./gradlew module-template:clean module-template:build

    위와 같이 빌드를 하면,

    ./module-template/build/libs

    경로 안에,

    module-template-0.0.1-SNAPSHOT.jar

    위와 같이 jar 파일이 생성됩니다.


(모듈 배포 방법)
- 위와 같이 빌드하여 나온 jar 파일을 사용하여,

    >> java -jar ./module-template/build/libs/module-template-0.0.1-SNAPSHOT.jar -Dspring.profiles.active=dev10000

    이렇게 실행을 하면 됩니다.


(모듈 배포 심화)
- 위와 같은 방식을 기본으로, Ubuntu 환경에서 배포하는 방식을 알아보겠습니다.

    먼저, 배포 환경입니다.
    ubuntu 22.04 를 기반으로 하며,
    git, JDK 가 설치되어 있다고 가정하고,
    본 프로젝트에서 module-template 를 배포하는 것으로 가정하겠습니다.

    1) Ubuntu 에서 jar 파일을 실행시킬 위치와 Git 레포지토리를 pull 받을 위치를 만들겠습니다.

        >> sudo mkdir -p ~/build_run/module_template
        >> sudo mkdir -p ~/git_repository

        위와 같습니다.

    2) 컨테이너 내부에서 git pull 을 받고 빌드를 할 것입니다.
        ~/git_repository 라는 폴더 안에, git pull 을 받고,

        >> cd ~/git_repository
        >> git clone https://github.com/RaillyLinker/Kotlin_SpringbootMvc_Template

        빌드 명령을 내리기 위한 권한을 부여한 후,

        >> sudo chmod -R 777 ./Kotlin_SpringbootMvc_Template

        Gradle 빌드로 빌드하길 원하는 모듈을 빌드 하면 됩니다.

        >> cd Kotlin_SpringbootMvc_Template
        >> ./gradlew module-template:clean module-template:build

        빌드가 이상없이 완료되면 현재 폴더 내에 build/libs 안에 .jar 파일이 생성될 것입니다.

    3) 생성된 jar 파일을 ~/build_run 경로로 옮기기 전에, 기존 프로세스를 종료시키고 실행을 시켜주면 끝입니다.

        >> ps aux | grep module-template-0.0.1-SNAPSHOT.jar | grep -v grep | awk '{print $2}' | xargs sudo kill -9
        >> mv ./module-template/build/libs/module-template-0.0.1-SNAPSHOT.jar ~/build_run/module_template/module-template-0.0.1-SNAPSHOT.jar
        >> cd ~/build_run/module_template
        >> nohup java -Dspring.profiles.active=dev10000 -jar ./module-template-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &

        jar 실행시의 profile 설정은 상황에 맞게 설정하면 됩니다.
        이상입니다.

        젠킨스 파이프라인 설정시에도 이를 참고하여 작성하면 쉽게 빌드가 가능합니다.