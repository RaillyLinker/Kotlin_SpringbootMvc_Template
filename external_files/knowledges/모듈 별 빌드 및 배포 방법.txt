[모듈 및 빌드 및 배포 방법]
(모듈 빌드 방법)
- module-template 를 빌드한다고 가정하였을 때,
    커맨드창에서 프로젝트 최외곽에 gradlew 가 있는 위치에서,

    >> ./gradlew module-template:clean module-template:build

    위와 같이 빌드를 하면,

    ./module-template/build/libs

    경로 안에,

    module-template-0.0.1-SNAPSHOT.jar

    위와 같이 jar 파일이 생성됩니다.


(모듈 배포 방법)
- 위와 같이 빌드하여 나온 jar 파일을 사용하여,

    >> java -jar ./module-template/build/libs/module-template-0.0.1-SNAPSHOT.jar -Dspring.profiles.active=dev10000

    이렇게 실행을 하면 됩니다.


(모듈 배포 심화)
- 위와 같은 방식을 기본으로, Docker 를 사용하여 배포하는 방식을 알아보겠습니다.

    먼저, 배포 환경입니다.
    ubuntu 22.04 를 기반으로 하며,
    git, docker 가 설치되어 있다고 가정하고,
    본 프로젝트에서 module-template 를 배포하는 것으로 가정하겠습니다.

    0) Docker 컨테이너에서 사용할 네트워크를 먼저 만들겠습니다.

        >> sudo docker network create my_network

        동일 네트워크를 사용하는 도커 컨테이너 사이에는 서로간의 네트워크 통신을 컨테이너 이름으로 할 수 있습니다.

        예를들어 test 컨테이너에서 sample 컨테이너의 8080 포트로 요청을 보내려면,
        test 컨테이너 내에서 "http://sample:8080" 이런 주소로 보내면 됩니다.

    1) Docker 가 실행되며 내부 로그 파일을 외부로 전달할 때 사용할 공유 폴더를 만들 것입니다.
        공유 폴더튼 ~/docker_run 폴더 내에 프로젝트 이름으로 만들어서,

        >> sudo mkdir -p ~/docker_run/module_template

        위와 같습니다.

        >> cd ~/docker_run

    2) 도커 컨테이너 명은 module-template 로 할 것입니다.
        다른 이름을 사용할 것이라면 아래 명령어를 수정해주세요.

        >> sudo docker stop module-template && sudo docker rm module-template
        >> sudo docker run -dit --name module-template \
             --network my_network \
             -v ./module_template:/app \
             -p 10000:10000 \
             ubuntu:22.04 tail -f /dev/null

        위와 같이 기존에 실행중이던 컨테이너는 삭제시키고, 새롭게 컨테이너를 띄웠습니다.
        컨테이너명은 앞서 말한 것처럼 수정해주시고,
        volume 설정은, 앞서 만든 폴더를 설정하고, 컨테이너 내부에서는 /app 을 연결할 것입니다.
        /app 경로에 .jar 파일을 옮겨놓고, 이를 실행시켜, 동일한 폴더 내에 로그 파일이 생성되게 할 것입니다.

        포트 설정도 서비스 포트 번호에 맞게 설정하고,
        이미지의 경우 위에서는 ubuntu 기본 이미지를 사용했는데,
        아래에 진행할 환경 설정 단계의 실행 시간을 단축시키려면,
        이미 해당 환경 설정이 끝난 이미지를 본인이 미리 만들어 사용하면 됩니다.

    3) 생성된 도커 컨테이너 안으로 들어가 springboot 를 띄우면 끝입니다.
        springboot 실행 환경이 설정되지 않은 기본 ubuntu 이미지를 사용했다면,

        >> sudo docker exec -it module-template bash
        >> apt update
        >> apt install git -y
        >> apt install openjdk-21-jdk -y

        이렇게 필수 유틸을 설치하면 됩니다.

    4) 컨테이너 내부에서 git pull 을 받고 빌드를 할 것입니다.
        ~/git_repository 라는 폴더 안에, git pull 을 받고,

        >> mkdir -p ~/git_repository
        >> cd ~/git_repository
        >> git clone https://github.com/RaillyLinker/Kotlin_SpringbootMvc_Template

        빌드 명령을 내리기 위한 권한을 부여한 후,

        >> chmod -R 777 ./Kotlin_SpringbootMvc_Template

        Gradle 빌드로 빌드하길 원하는 모듈을 빌드 하면 됩니다.

        >> cd Kotlin_SpringbootMvc_Template
        >> ./gradlew module-template:clean module-template:build

        빌드가 이상없이 완료되면 현재 폴더 내에 build/libs 안에 .jar 파일이 생성될 것입니다.

    5) 마지막으로, 생성된 jar 파일을 /app 경로로 옮긴 후 실행을 시켜주면 끝입니다.

        >> mv ./module-template/build/libs/module-template-0.0.1-SNAPSHOT.jar /app/module-template-0.0.1-SNAPSHOT.jar
        >> cd /app
        >> nohup java -Dspring.profiles.active=dev10000 -jar ./module-template-0.0.1-SNAPSHOT.jar > /dev/null 2>&1 &
        >> exit

        jar 실행시의 profile 설정은 상황에 맞게 설정하면 됩니다.
        이상입니다.

        젠킨스 파이프라인 설정시에도 이를 참고하여 작성하면 쉽게 빌드가 가능합니다.