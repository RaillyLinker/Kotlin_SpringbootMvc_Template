[Spring Boot Kotlin JPA와 데이터베이스 상호 매핑 정리]

(숫자 데이터)
TINYINT
-128 ~ 127 정수 (1Byte)
@Column(name = "tiny_column")
val tinyColumn: Byte

TINYINT UNSIGNED
0 ~ 255 정수 (1Byte)
@Column(name = "tiny_unsigned", columnDefinition = "TINYINT UNSIGNED")
val tinyUnsigned: Short

SMALLINT
-32,768 ~ 32,767 정수 (2Byte)
@Column(name = "small_column")
val smallColumn: Short

SMALLINT UNSIGNED
0 ~ 65,535 정수 (2Byte)
@Column(name = "small_unsigned", columnDefinition = "SMALLINT UNSIGNED")
val smallUnsigned: Int

MEDIUMINT
-8,388,608 ~ 8,388,607 정수 (3Byte)
@Column(name = "medium_column")
val mediumColumn: Int

MEDIUMINT UNSIGNED
0 ~ 16,777,215 정수 (3Byte)
@Column(name = "medium_unsigned", columnDefinition = "MEDIUMINT UNSIGNED")
val mediumUnsigned: Int

INT
-2,147,483,648 ~ 2,147,483,647 정수 (4Byte)
@Column(name = "int_column")
val intColumn: Int

INT UNSIGNED
0 ~ 4,294,967,295 정수 (4Byte)
@Column(name = "int_unsigned", columnDefinition = "INT UNSIGNED")
val intUnsigned: Long

BIGINT
-2^63 ~ 2^63-1 정수 (8Byte)
@Column(name = "big_column")
val bigColumn: Long

BIGINT UNSIGNED
0 ~ 2^64-1	정수 (8Byte)
@Column(name = "big_unsigned", columnDefinition = "BIGINT UNSIGNED")
val bigUnsigned: BigInteger

FLOAT
-3.4E38 ~ 3.4E38 단정밀도 부동소수점 (4Byte)
@Column(name = "float_column")
val floatColumn: Float

FLOAT UNSIGNED
0 ~ 3.402823466E+38 단정밀도 부동소수점 (4Byte)
@Column(name = "float_unsigned", columnDefinition = "FLOAT UNSIGNED")
val floatUnsigned: Float

DOUBLE
-1.7E308 ~ 1.7E308 배정밀도 부동소수점 (8Byte)
@Column(name = "double_column")
val doubleColumn: Double

DOUBLE UNSIGNED
0 ~ 1.7976931348623157E+308 배정밀도 부동소수점 (8Byte)
@Column(name = "double_unsigned", columnDefinition = "DOUBLE UNSIGNED")
val doubleUnsigned: Double

DECIMAL(p, s)
p(전체 자릿수, 최대 65), s(소수점 아래 자릿수, p 보다 작거나 같아야 함) 설정 가능 고정 소수점 숫자
@Column(name = "decimal_column", columnDefinition = "DECIMAL(10, 2)")
val decimalColumn: BigDecimal


(날짜 데이터)
DATE
1000-01-01 ~ 9999-12-31
@Column(name = "date_column")
val dateColumn: LocalDate

DATETIME
1000-01-01 00:00:00 ~ 9999-12-31 23:59:59
@Column(name = "datetime_column")
val datetimeColumn: LocalDateTime

TIME
-838:59:59 ~ 838:59:59
@Column(name = "time_column")
val timeColumn: LocalTime

TIMESTAMP
1970-01-01 00:00:01 UTC ~ 2038-01-19 03:14:07
@Column(name = "timestamp_column")
val timestampColumn: LocalDateTime

YEAR
1901 ~ 2155	정수
@Column(name = "year_column")
val yearColumn: Int


(문자 데이터)
문자 관련 데이터는 영문, 숫자를 기준으로 1 바이트 1 문자,
그외 문자는 그 이상으로, 인커딩에 따라 달라집니다.
UTF-8 에서 한글은 3 바이트, 특수문자는 4 바이트입니다.

CHAR(n)
고정 길이 문자열 (최대 255 Byte)
CHAR 타입은 항상 지정된 길이만큼 공간을 차지하며, 실제 저장되는 문자열이 그보다 짧으면 빈 공간으로 패딩하여 저장합니다.
@Column(name = "char_column", length = n)
val charColumn: String

VARCHAR(n)
가변 길이 문자열 (최대 65,535 Byte)
CHAR 과 달리 저장되는 데이터의 길이에 따라 실제 저장되는 공간이 달라집니다.
CHAR 에 비해 저장 공간 활용에 강점이 있고 성능에 미비한 약점이 있습니다.
@Column(name = "varchar_column", length = n)
val varcharColumn: String

TINYTEXT
가변 길이 문자열 최대 255 Byte
@Column(name = "tinytext_column", columnDefinition = "TINYTEXT")
val tinyTextColumn: String

TEXT
가변 길이 문자열 최대 65,535 Byte
@Column(name = "text_column", columnDefinition = "TEXT")
val textColumn: String

MEDIUMTEXT
가변 길이 문자열 최대 16,777,215 Byte
@Column(name = "mediumtext_column", columnDefinition = "MEDIUMTEXT")
val mediumTextColumn: String

LONGTEXT
가변 길이 문자열 최대 4,294,967,295 Byte
@Column(name = "longtext_column", columnDefinition = "LONGTEXT")
val longTextColumn: String


(BIT 데이터)
BIT(1)
1 bit 값
@Column(name = "one_bit", columnDefinition = "BIT(1)")
val oneBit: Boolean

BIT(n)
n bit 값 (bit 사이즈에 따라 변수 사이즈를 맞춰 매핑)
@Column(name = "n_bit", columnDefinition = "BIT(6)")
val nBit: Byte


(공간 데이터)
GEOMETRY
공간 데이터 타입
@Column(name = "geometry_column", columnDefinition = "GEOMETRY")
val geometryColumn: Geometry

POINT
(X, Y) 공간 좌표
@Column(name = "point_column", columnDefinition = "POINT")
val pointColumn: Point

LINESTRING
직선의 시퀀스
@Column(name = "linestring_column", columnDefinition = "LINESTRING")
val linestringColumn: LineString

POLYGON
다각형
@Column(name = "polygon_column", columnDefinition = "POLYGON")
val polygonColumn: Polygon


(컬렉션)
JSON
JSON 데이터를 저장하기 위한 특수한 데이터 타입(MySQL 5.7부터 지원)
@Column(name = "json_column", columnDefinition = "JSON")
val jsonColumn: String

ENUM('A', 'B', ...)
정해진 문자열 값
enum class Status {
    ACTIVE, INACTIVE, PENDING
}
@Column(name = "enum_column")
@Enumerated(EnumType.STRING)
val enumColumn: Status


(BINARY 데이터)
BINARY(n)
고정 길이 이진 데이터 (최대 65535 바이트)
암호화된 값, UUID, 고정 길이 해시값 등을 저장하는 역할
@Column(name = "binary_column", columnDefinition = "BINARY(10)")
val binaryColumn: ByteArray

VARBINARY(n)
가변 길이 이진 데이터 (최대 65,535 바이트)
동적 크기의 바이너리 데이터, 이미지 등을 저장하는 역할
@Column(name = "varbinary_column", columnDefinition = "VARBINARY(10)")
val varbinaryColumn: ByteArray


(BLOB 데이터)
BLOB 타입 데이터는 주로 이미지, 음악 파일, 문서 파일 등 이진 데이터를 저장하는 데 활용됩니다.

TINYBLOB
최대 255 바이트
@Column(name = "tinyblob_column", columnDefinition = "TINYBLOB")
val tinyBlobColumn: ByteArray

BLOB
최대 65,535바이트
@Column(name = "blob_column")
val blobColumn: ByteArray

MEDIUMBLOB
최대 16,777,215 바이트
@Column(name = "mediumblob_column", columnDefinition = "MEDIUMBLOB")
val mediumBlobColumn: ByteArray

LONGBLOB
최대 4,294,967,295 바이트
@Column(name = "longblob_column", columnDefinition = "LONGBLOB")
val longBlobColumn: ByteArray